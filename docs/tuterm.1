.\" tuterm
.\"
.\" Copyright (c) 2021 The Tuterm Contributors
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\" of this software and associated documentation files (the "Software"), to deal
.\" in the Software without restriction, including without limitation the rights
.\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\" copies of the Software, and to permit persons to whom the Software is
.\" furnished to do so, subject to the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included in all
.\" copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.

.TH TUTERM 1 "" "" "User Commands"
.SH NAME
tuterm \- a framework for real-time tutorials and demonstrations of CLI programs.
.SH SYNOPSIS
\fBtuterm\fR [\fB--help\fR] [\fB--version\fR]

\fBtuterm\fR [\fIOPTIONS\fR] \fISCRIPT\fR

.SH DESCRIPTION

Tuterm is a script that provides functions to easily create or run tutorials for
CLI programs. It allows you to create interactive tutorials, test program
functionality and create automated demonstrations - all with the same code.

\fBTLDR:\fR If you are only interested in running scripts that someone else
created, you won't need to read past the \fICONFIGURATION\fR section. If you
want to create your own, please read on.

\fBBasic terminology\fR

.RS 4
\fBscript\fR - a file that can be run by tuterm

\fBmode\fR - the mode in which tuterm runs: \fItutorial\fR, \fIdemo\fR

\fBtutorial mode\fR - interactive mode

.RS 4
Tuterm tells you which commands you're supposed to run and you run them.
.RE

\fBdemo mode\fR - non-interactive mode

.RS 4
Tuterm performs the commands on its own. This is useful to quickly show what a
program is capable of, especially when used together with \fBasciinema(1)\fR.
.RE

.RE

In order to start a script, simply run \fBtuterm\fR \fISCRIPT\fR, replacing
\fISCRIPT\fR with the name of the script you want to run. This will usually be a
script that was installed on your system by another program.  Alternatively,
\fISCRIPT\fR can be any valid file path.

If there is a local script with the same name as an installed script, the
installed one will be used. If you want to use the local one, you should make it
explicit like ./\fISCRIPT\fR. If the file name contains any slashes, the local
file will be used.

By default, tuterm runs in tutorial mode. This can be changed using the
\fB-m/--mode\fR option.

Any commands you run in a tutorial will be run in a temporary directory. So
don't worry if you see \fB~\fR as the current directory in a tutorial. That is
not your actual home directory, but a fake one.

.SH KEY BINDINGS

    \fBShift + Tab\fR \- complete the current command and run it automatically

.SH OPTIONS

.TP
.BR \-h ", " \-\-help
Prints help message.

.TP
.BR \-v ", " \-\-version
Prints program version.

.TP
.BR \-l ", " \-\-list
List the installed tuterm scripts.

.TP
.BR \-m ", " \-\-mode " \fIMODE\fR"
Set the mode to \fIMODE\fR. The following modes are available: \fBtutorial\fR,
\fBdemo\fR. In the absence of this option, tuterm defaults to tutorial mode.

.TP
.BR \-f ", " \-\-fast
Do not type out characters in real time.

.TP
.BR \-p ", " \-\-progress
Print tutorial/demo progress on the right side of the terminal. This is an
experimental feature.

.TP
.BR \-\-init-config
Create an initial user configuration at

    \fI$XDG_CONFIG_HOME/tuterm/config.sh\fR

If \fI$XDG_CONFIG_HOME\fR is not available, \fI~/.config/tuterm/config.sh\fR
will be created instead.

.SH CONFIGURATION
Configuration files are loaded in the following order:

.RS 4
1. System configuration at \fI$PREFIX/share/tuterm/config.sh\fR

2. User configuration at:

    - \fI$TUTERM_CONFIG\fR if it exists, otherwise

    - \fI$XDG_CONFIG_HOME/tuterm/config.sh\fR if it exists, otherwise

    - \fI~/.config/tuterm/config.sh\fR if it exists
.RE

.SS Configuration variables

\fBSHELL\fR \- which shell's prompt to use (TODO this is a planned feature)

\fBDELAY\fR \- time it takes to type out a character

\fBDELAY_SEP\fR \- time it takes to type out a separator (-, /, etc.). Falls
back to \fBDELAY\fR if undefined

\fBDELAY_PROMPT\fR \- time it takes to start typing after the prompt is displayed

\fBCOLOR_CMDLINE\fR \- color of expected user input

\fBCOLOR_WARNING\fR \- color of warning messages

\fBCOLOR_MESSAGE\fR \- color of a message printed by the \fBmessage\fR command

    \fBNOTE:\fR All colors are specified as ANSI color sequences as per
          \fBterminal-colors.d(5)\fR

The configuration options are also documented inside the system configuration
file.

Individual tuterm scripts can perform their own configuration inside a
\fBconfigure\fR function. Unspecified options will be taken from any applicable
configuration files.

.SH SCRIPTS
The flow of a script file is straightforward. Tuterm shows a prompt and
expected user input (see shell function \fBcmdline\fR). Then it repeats the
prompt and waits for the user to repeat that input. After that it runs the
command, and prints any output that command may have produced. Then it shows the
next prompt and so on. Between each prompt, an instructional message may be
shown (see shell functions \fBmessage\fR, \fBMessage\fR).

Tuterm is written in bash, and tuterm scripts are nothing more than bash
scripts. You can basically do any shell scripting you want in them, but keep in
mind a few caveats:

.RS 4
1. Script-local configuration should be performed inside a user-defined
\fBconfigure\fR function.

2. Variable names that start with \fItwo underscores\fR are reserved for
tuterm's internal use, so don't define them.

.RE
In most cases you don't even have to follow these guidelines, but it is
recommended in order to get consistent behavior.

.SH ENVIRONMENT
The behavior of tuterm scripts is configured using environment or shell
variables.

\fBNOTE:\fR All environment variables available to tuterm will be available to
tuterm scripts as well.

.SS
Configuration variables

The following configuration variables are available in addition to those documented
in \fICONFIGURATION\fR:

\fBTUTERM_NAME\fR \- friendly name of the script that is currently running

The following read-only variables are available in scripts:
.SS
Read-only variables
\fBTUTERM_SCRIPT\fR \- path to the script file that is currently running

\fBNOTE\fR: Variable names that start with \fItwo underscores\fR are reserved
for tuterm's internal use, so don't define them.

.SS
Shell functions (API)

While creating your own tuterm scripts, there are a few predefined shell
functions you can use:

.TP
\fBcmdline\fR (alias: \fBc\fR)

.RS 4
show \fBprompt\fR and:

.RS 4
1. in tutorial mode: print expected user input (provided as arguments) and wait
for the user's input. Repeat the prompt until the user's input is correct, then
run the command that was input. Wrong input triggers a warning message colored
by the variable \fBCOLOR_MESSAGE\fR.

2. in demo mode: print the expected command and execute it without any user
interaction.
.RE

\fBNOTE:\fR Keep in mind that quotes are parsed by bash.
.RE

\fBevaluate\fR (alias: \fBe\fR)
    same as cmdline but does not run the command

\fBmessage\fR (alias: \fBm\fR)
    print a message to the user if tutorial mode is on

    Accepts same options as bash's \fBecho\fR.

\fBMessage\fR (alias: \fBM\fR)
    print a message to the user in tutorial or demo mode

\fBoption\fR (alias: \fBopt\fR)
    query if the arguments have been passed as options to tuterm

.RS 4
Options are specified using their long names, excluding any prefix hyphens.
.RE

\fBmode\fR
    test if the current mode is the one passed as argument

.RS 4
The argument does not have to be the full name of the mode, any uniquely
identifying substring will do.
.RE

\fBfake_home\fR
    use a custom fake home directory and cd to it

.RS 4
The \fI$HOME\fR variable will be set (and exported) to the fake home path.
.RE

    \fBNOTES:\fR

        - This function has no effect when called from inside the \fBrun\fR
          function. Call it from the outside scope.
        - For safety reasons, this function can only be called once.
        - The fake home will not be deleted automatically

\fBcolor\fR
.RS 4
set output color to the one provided as argument.

Colors are supported in two formats. The first is an ANSI sequence as per
\fIterminal-colors.d(5)\fR. The other is by function name; the
color is taken from the corresponding \fBCOLOR_*\fR variable. For example,
\fBcolor warning\fR will take the color from the variable \fBCOLOR_WARNING\fR.
Color is reset to default using \fBcolor 0\fR.
.RE

\fBset_option\fR
.RS 4
set commandline options at runtime

Usage: \fBset_option \fIoption value\fR

Use this command if you want the script to behave as if a certain command line
option has been set. The option name must be the long name without the
two beginning slashes (e.g. \fBfast\fR instead of \fB--fast\fR). For options
without arguments, a non-empty value sets the option as active.
.RE

.RE

\fBsleep\fR
    sleep that works only if tuterm wasn't run with the \fB--fast\fR option

    Otherwise, it behaves exactly like the standard \fBsleep\fR command.

\fBdepends\fR
    declare executables on which the tuterm script depends

.RS 4
If any of the specified dependencies is not satisfied, print an error and exit.
.RE

.SS
User-overridable functions
\fBprompt\fR \- custom command line prompt

\fBconfigure\fR \- configuration for the script

\fBrun\fR \- herein lies the meat of the script

.SS Debugging functions

\fBSKIP\fR
    skip all subsequent tutorial/demo functions until \fBUNSKIP\fR is called.

.RS 4
Note that this only skips messages, prompts, etc. It does not skip the
effects that tuterm functions create. This ensures that commands depending
on the skipped commands run properly.
.RE

\fBUNSKIP\fR
    undo the effects of \fBSKIP\fR.

.SH INSTALLING SCRIPTS

Scripts are installed under the \fI$PREFIX/share/tuterm/scripts\fR directory.
\fI$PREFIX\fR depends on your distribution and method of installation, but it is
most often \fI/usr\fR. You can install a script directly under this directory or
in a subdirectory. Either way, the script can be launched from tuterm by name
only, without the need to specify the subdirectory tree. If there are multiple
scripts with the same name under two different directories, the user will be
prompted to choose one of them.

Hidden files (dotfiles) will not be available to the user from tuterm, so they
are a good place to put any helper files that your scripts may use.

.SH EXAMPLES

You can find an empty example tutorial in

    \fI$PREFIX/share/tuterm/example.tut\fR

The stock configuration file can be found in

    \fI$PREFIX/share/tuterm/config.sh\fR

Alternatively, you can run \fBtuterm --init-config\fR to get yourself going.

.SS Projects using tuterm

TODO: just placeholders, disregard for now.

-
.UR https://github.com/tem-cli/tem
\fBtem\fR (TODO)
.UE

-
.UR https://github.com/veracioux/tuterm-collection
\fBtuterm-collection\fR
.UE

.SH SEE ALSO
bash(1), asciinema(1), terminal-colors.d(5)
