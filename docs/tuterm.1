.TH TUTERM 1 "" "" "User Commands"
.SH NAME
tuterm \- a framework to create tutorials and demonstrations of CLI programs.
.SH SYNOPSIS
\fBtuterm\fR [\fB--help\fR] [\fB--version\fR]

\fBtuterm\fR [\fIOPTIONS\fR] \fISCRIPT\fR

\fBtuterm\fR \fB--mode\fR tutorial \fB--server\fR [\fIOPTIONS\fR] \fISCRIPT\fR

\fBtuterm\fR \fB--mode\fR tutorial \fB--client\fR [\fIOPTIONS\fR] [\fISERVER_ID\fR]

.SH DESCRIPTION

\fBNOTE:\fR If you are using tuterm for the first time, it is recommended that
you run \fBtuterm tuterm\fR for a very friendly introduction.

Tuterm is a script that provides functions to easily create or run tutorials for
CLI programs. It allows you to create interactive tutorials, test program
functionality and create automated demonstrations - all with the same code.

.TP
\fBBasic terminology\fR

\fBscript\fR - a file that can be run by tuterm

\fBmode\fR - the mode in which tuterm runs: \fItutorial, demo\fR or TODO.
.RE

In order to start a script, simply run \fBtuterm\fR \fITUTORIAL\fR, replacing
\fITUTORIAL\fR with the name of the tutorial you want to run. This will usually
be a tutorial that was installed on the system by another program.
Alternatively, \fITUTORIAL\fR can be any valid file path.

By default, tuterm runs in tutorial mode. This can be changed using the
\fB-m/--mode\fR option.

In tutorial mode, you also have the option to run tuterm in a
\fIserver-client\fR configuration. In this mode, one instance of tuterm (server)
displays instructions to the user; another instance (client) takes user input
and evaluates it. This way, you can have the instructions and your input side by
side, for example using \fBtmux(1)\fR. The server is started by running tuterm
with the \fB--server\fR option and takes a tutorial script as its argument. The
client is started by running tuterm with the \fB--client\fR option. Instead of
a script, the command will take a server ID as its argument.

\fBTLDR:\fR If you are only interested in running scripts that someone else
created, you won't need to read past the \fIOPTIONS\fR section.

.SH OPTIONS

.TP
.BR \-h ", " \-\-help
Prints help message.

.TP
.BR \-v ", " \-\-version
Prints program version.

.TP
.BR \-m ", " \-\-mode " \fIMODE\fR"
Set the mode to \fIMODE\fR. The following modes are available: \fBtutorial\fR,
\fBdemo\fR. In the absence of this option, tuterm defaults to tutorial mode.

.TP
.BR \-f ", " \-\-fast
Do not type out characters in real time.

.TP
.BR \-s ", " \-\-server
This instance of tuterm will be a server, i.e. it will only show instructions to
the user. To enable user interaction, run another tuterm instance with the
\fB\-\-client\fR option.

.TP
.BR \-c ", " \-\-client
This instance of tuterm will be a client. It will provide user interaction while
a server (tuterm invoked with \fB\-\-server\fR) will show instructions to the
user. The PID of the associated server is provided as an argument. If no
argument is provided, a server will be determined automatically.

.TP
.BR \-l ", " \-\-list
List installed tuterm scripts.

.TP
.BR \-L ", " \-\-list-active
List running tuterm servers.

.SH CONFIGURATION
Configuration files are loaded in the following order:

.RS 4
1. System configuration at \fI$PREFIX/share/tuterm/config.sh\fR

2. User configuration at:

    - \fI$TUTERM_CONFIG\fR if it exists, otherwise
    - \fI$XDG_CONFIG_HOME/tuterm/config.sh\fR if it exists, otherwise
    - \fI$USER/.config/tuterm/config.sh\fR if it exists
.RE

The configuration options are documented inside the system configuration file,
as well as in the \fIENVIRONMENT\fR section of this manual.

Individual tuterm scripts can perform their own configuration by defining a
\fBconfigure\fR function. Unspecified options will be taken from any applicable
configuration files.

.SH SCRIPTS
The flow of a script file is straightforward. Tuterm shows a prompt and
expected user input (see shell function \fBcmdline\fR). Then it repeats the
prompt and waits for the user to repeat that input. After that it runs the
command, and prints any output that command may have produced. Then it shows the
next prompt and so on. Between each prompt, an instructional message may be
shown (see shell functions \fBmessage\fR, \fBMessage\fR).

Tuterm is written in bash, and tutorial files are nothing more than bash
scripts. You can basically do any shell scripting you want in them, but keep in
mind a few caveats:

.RS 4
1. Script-local configuration is performed inside a user-defined \fBconfigure\fR
function

2. Predefined shell functions and some predefined shell variables provided by
tuterm are read-only.

3. Variable names that start with \fItwo underscores\fR are reserved
for tuterm's internal use, so don't define them.

.RE
In most cases you don't even have to follow these guidelines, but it is
recommended in order to get consistent behavior.

.SH ENVIRONMENT
The behavior of tuterm is configured using environment or shell variables.

\fBNOTE:\fR All environment variables available to tuterm will be available to
tuterm scripts as well.

.SS
Configuration variables
\fBDELAY\fR \- time it takes to type out a character

\fBDELAY_SEP\fR \- time it takes to type out a separator (-, /, etc.). Falls
back to \fBDELAY\fR if undefined

\fBDELAY_PROMPT\fR \- time it takes to start typing after the prompt is displayed

\fBCOLOR_CMDLINE\fR \- color of expected user input

\fBCOLOR_WARNING\fR \- color of warning messages

\fBCOLOR_MESSAGE\fR \- color of a message printed by the \fBmessage\fR command

.RS 4
\fBNOTE:\fR All colors are specified as ANSI color sequence as per
      \fBterminal-colors.d(5)\fR
.RE

\fBTUTERM_NAME\fR \- friendly name of the script that is currently running

\fBSHELL\fR \- which shell's prompt to use (TODO)

The following read-only variables are available in tutorial scripts:
.SS
Read-only variables
\fBTUTERM_SCRIPT\fR \- path to the script file that is currently running

\fBNOTE\fR: Variable names that start with \fItwo underscores\fR are reserved
for tuterm's internal use, so don't define them.

.SS
Shell functions

When defining tutorial scripts, there are a few predefined shell functions you
can use.

.TP
\fBcmdline\fR (alias: \fBc\fR)

.RS 4
show \fBprompt\fR and:

.RS 4
1. in tutorial mode: print expected user input (provided as arguments) and wait
for the user's input. Repeat the prompt until the user's input is correct, then
run the command that was input. Wrong input triggers a warning message colored
by the variable \fBCOLOR_MESSAGE\fR.

2. in demo mode: print the expected user input without any user interaction
.RE
.RE

\fBmessage\fR (alias: \fBm\fR)
    print a message to the user if tutorial mode is on.

    Accepts same options as bash's \fBecho\fR.

\fBMessage\fR (alias: \fBM\fR)
    print a message to the user in tutorial or demo mode

\fBoption\fR (alias: \fBopt\fR)
    query if the options passed as arguments have been set

.RS 4
Options are specified using their long names, excluding any hyphens.
.RE

\fBmode\fR
    test if the current mode is the one passed as argument

.RS 4
The argument does not have to be the full name of the mode, any uniquely
identifying substring will do.
.RE

\fBfake_home\fR
    create a fake home directory and cd to it

    The contents of \fB$HOME\fR will be modified accordingly.

\fBcolor\fR
.RS 4
set output color to the one provided as argument.

Colors are supported in two formats. The first is an ANSI sequence as per
\fIterminal-colors.d(5)\fR. The other is by function name; the
color is taken from the corresponding \fBCOLOR_*\fR variable. For example,
\fBcolor warning\fR will take the color from the variable \fBCOLOR_WARNING\fR.
Color is reset to default using \fBcolor 0\fR.
.RE

.SS
User-overridable functions
\fBprompt\fR \- command line prompt

\fBconfigure\fR \- initial configuration for the tutorial

\fBrun\fR \- this is where the tutorial is run

.SH EXAMPLES
TODO
.SS Projects using tuterm
-
.UR https://github.com/tem-cli/tem
tem
.UE
.UR TODO
tuterm-collection
.UE

.SH SEE ALSO
bash(1), asciinema(1)
