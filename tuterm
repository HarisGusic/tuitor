#!/usr/bin/env bash

# tuterm
#
# Copyright (c) 2021 The Tuterm Contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

__TUTERM_VERSION='develop'
[ -z "$__TUTERM_PREFIX" ] &&\
    __TUTERM_PREFIX='/usr/local'

# ┏━━━━━━━━━━━━━━━━━━┓
# ┃ Helper functions ┃
# ┗━━━━━━━━━━━━━━━━━━┛

# Print $* as if the user were typing it on a keyboard (using DELAY* variables)
# --fast option makes the output instantaneous
__print_out() {
    if option 'fast' || [ -n "$__ENV_FAST" ]; then
        # Print it out instantaneously
        echo -n "$*"
    else
        # Print char by char in real time
        local start_color_code
        start_color_code=''
        for i in $(seq 1 "$(echo "$*" | wc -m)")    # For each character in $*
        do
            local char
            char="$(echo -n "$*" | cut -c "$i" | tr -d '\n')"
            # Wait a certain delay (as if a user were typing it)
            if echo "$char" | grep -q "[a-zA-Z0-9]" || [ "$char" = "$__prev_char" ]
            then
                sleep "$DELAY"
            else
                # Separator characters take a different time to print
                sleep "$DELAY_SEP"
            fi
            echo -n "$char"
            # If character with code \033 is encountered, everything until m is
            # considered part of a color code sequence. These characters are
            # printed instantaneously.
            if [ "$char" = $'\033' ]; then
                start_color_code='true'
                continue
            elif [ -n "$start_color_code" ] && [ "$char" = 'm' ]; then
                start_color_code=''
                continue
            fi
            [ -n "$start_color_code" ] && continue
            # Repeating characters will be printed using DELAY even if they are separators
            __prev_char="$char"
        done
        sleep "$DELAY"
    fi
}

# Convert path to its canonical version
__abspath() {
    if [ -f "$1" ]; then                                # File exists
        pushd "$(dirname "$1")" >/dev/null || return    # cd and print path
        echo "$PWD/$(basename "$1")"
        popd >/dev/null || return
    else
        pushd "$1" >/dev/null 2>/dev/null || return
        pwd
        popd >/dev/null || return
    fi
}

# ┏━━━━━━━━━━━━━━━┓
# ┃ API FUNCTIONS ┃
# ┗━━━━━━━━━━━━━━━┛

cmdline() {
    evaluate "$@"
    # Run the command that was entered into the command line
    eval "$*"
}
alias c=cmdline

evaluate() {
    prompt
    stty -echo
    if ! option 'fast' && [ -z "$__ENV_FAST" ]; then
        sleep "$DELAY_PROMPT"               # Wait a small delay after prompt
    fi
    if ! mode 'demo'; then
        color cmdline
    fi
    __print_out "$*"; color 0; echo         # Type out the command line
    stty echo
    if mode 'tutorial'; then
        prompt
        __USER_INPUT=''
        read -r __USER_INPUT                        # Read user input
        if [ "$__USER_INPUT" != "$*" ]; then        # Oops, wrong input
            color warning >&2
            echo -e "Wrong command, try again" >&2
            color 0 >&2
            __ENV_FAST='true' cmdline "$@"
            return
        fi
    fi
}
alias e=evaluate

# Message that works in both tutorial and demo mode
Message() {
    color message
    echo "$@"
    color 0
}
alias M=Message

# Message that works only in tutorial mode
message() {
    ! mode 'demo' && Message "$@"
}
alias m=message

# Test if all options from $@ were provided to tuterm (only long format)
option() {                                          # WARNING: bashisms ahead
    for arg in "$@"; do
        local opt_name="__OPT_${arg^^}"
        [ -z "${!opt_name}" ] && return 1
    done
    return 0
}
alias opt=option

# Test if $1 is the active mode
mode() {
    if [ "$#" = 0 ]; then
        echo "$__OPT_MODE"
    else
        [[ "$__OPT_MODE" = "$1"* ]]
    fi
}

fake_home() {
    if [ "$#" -gt 0 ]; then
        local dest="$1"
    else
        # Find all home<NUM> subdirectories under /tmp/tuterm and create the
        # directory home<NUM+1>
        local homedirs="$(ls -d -1 /tmp/tuterm/home* 2>/dev/null)"
        # Get last (sorted) directory of the form /tmp/tuterm/home*
        local lasthome="$(echo "$homedirs" | sort | tail -1)"
        # Get the suffix number
        # local num="$(echo "$lasthome" | sed 's:.*\([0-9]\+\)$:\1:')"
        local num="$(echo "$lasthome" | sed 's:[^0-9]*\([0-9]*\)$:\1:')"
        if [ -z "$homedirs" ]; then
            local dest="/tmp/tuterm/home"
        else
            # Increment the number
            let num++
            local dest="/tmp/tuterm/home$num"
        fi
    fi
    if ! mkdir -p "$dest"; then
        echo -e 'tuterm: error: could not create fake home!\nAborting.' >&2
        exit 1
    fi
    cd "$dest" || exit
    __FAKE_HOME="$dest"
    export HOME="$dest"
}

# Set color for printing. See manpage for details.
color() {
    # Try to query a variable named "COLOR_$1", automatically capitalized
    local color_var="COLOR_${1^^}"
    if [ -v "$color_var" ]; then            # Variable exists
        echo -ne "\033[${!color_var}m"
    else                                    # doesn't
        echo -ne "\033[$1m";
    fi
}

# Usage: set_option option value
set_option() {
    eval "__OPT_${1^^}=$2"
}

# Extend an existing function with additional functionality
extend() {
    eval "_old_$1 () $(declare -f "$1" | tail -n +2)"
}

# ┏━━━━━━━━━━━━━┓
# ┃ LOAD CONFIG ┃
# ┗━━━━━━━━━━━━━┛

__SYSTEM_CONFIG="$__TUTERM_PREFIX/share/tuterm/config.sh"
[ -f "$__SYSTEM_CONFIG" ] && source "$__SYSTEM_CONFIG"

if [ -z "$TUTERM_CONFIG" ]; then
    if [ -n "$XDG_CONFIG_HOME" ]; then
        TUTERM_CONFIG="$XDG_CONFIG_HOME/tuterm/config.sh"
    else
        TUTERM_CONFIG="$HOME/.config/tuterm/config.sh"
    fi
fi
[ -f "$TUTERM_CONFIG" ] && source "$TUTERM_CONFIG"

# Shell configuration
shopt -s expand_aliases

# ┏━━━━━━━━━━━━━━━┓
# ┃ PARSE OPTIONS ┃
# ┗━━━━━━━━━━━━━━━┛

__usage() {
    echo -e 'usage: tuterm [OPTIONS] FILE'
    echo -e '\npositional arguments:'
    echo -e '  FILE                 \tscript file'
    echo -e '\noptions:'
    echo -e '  -h, --help           \tshow this help message and exit'
    echo -e '  -v, --version        \tprint tuterm version'
    echo -e '  -m, --mode MODE      \tselect MODE: tutorial (default) or demo'
    echo -e '  -f, --fast           \tdo not type characters in real time'
    echo -e '  -l, --list           \tlist installed tuterm scripts'
    echo -e '  --init-config        \tcreate an initial user config file'
}
__list_scripts() {
    local list
    list="$(ls -1 "$__TUTERM_PREFIX/share/tuterm/scripts")"
    if [ -z "$list" ]; then
        echo "No tuterm scripts are installed on your system."
        echo
        echo "Tuterm scripts are usually installed by programs that support them."
        echo "You can also have a look this collection of scripts for various programs:"
        echo
        echo "https://github.com/harisgusic/tuterm-collection"
        return 1
    else
        echo "The following tuterm scripts are installed on your system:"
        echo "$list" | sed 's/^/\t/g'
    fi
}

if [ "$#" = 0 ]; then                               # Called with no arguments
    __usage
    echo
    __list_scripts
    exit
fi

__arguments=$(getopt --options 'hvpflm:'\
                        --long 'help,version,path,fast,list,mode:,init-config'\
                        --name 'tuterm'\
                            -- "$@")
[ $? != 0 ] && exit

# Transform options generated by getopt into a proper array
eval __arguments=(${__arguments[@]})
# Split array __arguments into two arrays: __options (arguments before '--')
# and __positional (arguments after '--')
for i in "${!__arguments[@]}"; do
    if [ "${__arguments[$i]}" = '--' ]; then
        __options=("${__arguments[@]::$i}")
        __positional=("${__arguments[@]:((i+1))}")
        break
    fi
done

__OPT_FAST=''
__ENV_FAST=''                   # Used in cmdline as a substitute for __OPT_FAST
__OPT_MODE='tutorial'
__ARG_FILE=''

# Parse options
# ━━━━━━━━━━━━━
for i in "${!__options[@]}"
do
    case "${__options[$i]}" in
        '-h'|'--help')
            __usage
            exit ;;
        '-v'|'--version')
            echo "tuterm version $__TUTERM_VERSION"
            exit ;;
        '-f'|'--fast')
            __OPT_FAST='true'
            continue ;;
        '-m'|'--mode')
            __OPT_MODE="${__options[((i+1))]}"
            continue ;;
        '-l'|'--list')
            __list_scripts
            exit ;;
        '--init-config')
            if [ -z "$XDG_CONFIG_HOME" ]; then
                XDG_CONFIG_HOME=~/.config
            fi
            if [ -e  "$XDG_CONFIG_HOME/tuterm/config.sh" ]; then
                echo "Configuration file already exists at $XDG_CONFIG_HOME/tuterm/config.sh">&2
                exit 1
            fi
            mkdir -p "$XDG_CONFIG_HOME/tuterm"
            cp "$__TUTERM_PREFIX/share/tuterm/config.sh" "$XDG_CONFIG_HOME/tuterm/"
            echo "User configuration created at $XDG_CONFIG_HOME/tuterm/config.sh"
            exit ;;
    esac
done

# Parse positional arguments
# ━━━━━━━━━━━━━━━━━━━━━━━━━━
if [ "${#__positional[@]}" = 1 ]; then                  # One positional argument
    __ARG_FILE="$__positional"
elif [ "${#__positional[@]}" = 0 ]; then                # No positional arguments
    echo 'tuterm: error: no script file specified' >&2
    exit 1
else                                                    # Multiple arguments
    echo 'tuterm: error: only one file argument is allowed' >&2
    exit 1
fi

# ┏━━━━━━━━━━━━━━━━━━━━━┓
# ┃ ARGUMENT PROCESSING ┃
# ┗━━━━━━━━━━━━━━━━━━━━━┛

# File that doesn't contain / will be taken from the default path
if [[ "$__ARG_FILE" != */* ]]; then
    # TODO add user-specific scripts directory
    __file="/usr/share/tuterm/scripts/$__ARG_FILE"
    # If default path contains the file take it, otherwise take the local file
    [ -f "$__file" ]  && __ARG_FILE="$__file"
fi
__ARG_FILE="$(__abspath "$__ARG_FILE")"

if [ ! -f "$__ARG_FILE" ]; then
    echo 'tuterm: error: script file does not exist' >&2
    exit 1
fi

[ -z "$__ARG_FILE" ] && { echo 'tuterm: no file specified' >&2; exit 1; }

# ┏━━━━━━━━━━━━┓
# ┃ RUN SCRIPT ┃
# ┗━━━━━━━━━━━━┛

if mode 'demo'; then
    # Disable user input in the terminal
    # TODO actually, this just makes it invisible. stty -cread doesn't work,
    # must look into that
    stty -echo
fi

# Exit cleanup
__on_exit() {
    # Remove fake home if it was created
    [ -n "$__FAKE_HOME" ] && rm -rf "$__FAKE_HOME"
}
trap __on_exit EXIT

# Prepare environment for the script
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TUTERM_SCRIPT="$__ARG_FILE"
source "$(realpath "$__ARG_FILE")"   # Load tuterm script

# Load the script's own configuration
[ "$(type -t configure)" = 'function' ] && configure

# Complete missing configuration options
[ -z "$DELAY_SEP" ]     && DELAY_SEP="$DELAY"
[ -z "$DELAY_PROMPT" ]  && DELAY_PROMPT="$DELAY"
[ -z "$TUTERM_NAME" ]   && TUTERM_NAME="$(basename "$TUTERM_SCRIPT")"

clear
run

# vim: filetype=sh foldmethod=syntax
